#! /usr/bin/env python3
# -*- coding: <utf-8> -*-

"""QualCity.

Usage:
    QualCity (-h | --help)
    QualCity pipeline <pipline_conf> [logger <log_conf>] [(-v | --verbose)]

Options:
    -h --help           Show this screen.
    -v --verbose        Verbose mode

"""

__version__ = '0.1.0a0'

import docopt

import time

import operator

import yaml

import logging
import logging.config

import qualcity.features
import qualcity.labels
import qualcity.learning
import qualcity.utils


logger = logging.getLogger('qualcity')
default_config = {
    'version': 1,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'WARN',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'formatter': 'verbose',
            'filename': 'qualcity-' + time.ctime() + '.log'
        }
    },
    'loggers': {
        'qualcity': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
        }
    }
}


def config_logger(arguments):
    if not arguments['logger']:
        logging.config.dictConfig(
            default_config
        )
        logger.info('Default logger chosen.')
    else:
        with open(arguments['<log_conf>'], mode='r') as conf:
            configuration = yaml.load(conf)

        configuration['handlers']['file']['filename'] = (
            'qualcity-' + time.ctime() + '.log'
        )
        configuration['loggers']['qualcity']['level'] = (
            'DEBUG' if arguments['--verbose'] else 'INFO'
        )
        logging.config.dictConfig(
            configuration
        )
        logger.info('Loaded logger from: ' + arguments['<log_conf>'])
        logger.debug(yaml.dump(configuration))


def get_labels(hierarchical, depth, LoD, threshold, labels_path, filetype):
    logger.info('Getting Labels ...')
    return [
        (building, label)
        for building, label in sorted(
            qualcity.labels.labels_map(
                labels_path,
                hierarchical,
                depth,
                LoD,
                threshold,
                filetype
            ).items(),
            key=operator.itemgetter(0)
        )
    ]


def format_labels(hierarchical, depth, LoD, threshold, labels_path, filetype):
    logger.info('Formatting labels')
    labels = get_labels(
        hierarchical,
        depth,
        LoD,
        threshold,
        labels_path,
        filetype
    )
    if depth > 0:
        labels = [
            (building, label)
            for building, label in labels
            if label != 'Unqualifiable'
        ]
    return zip(*labels)


def build_maniflod(algorithm, **parameters):
    logger.info('Building a manifold transformer...')
    return qualcity.utils.resolve(algorithm)(
        **parameters
    )


def build_reductor(algorithm, **parameters):
    logger.info('Building a dimension reductor...')

    if parameters['n_components'] > 3:
        logger.error('Cannot visualize more than three dimensions!')
        raise ValueError
    elif parameters['n_components'] < 2:
        logger.error('Cannot visualize less than two dimensions!')
        raise ValueError

    return qualcity.utils.resolve(algorithm)(
        **parameters
    )


def visualize(features, labels, label_names, **visualization_args):
    logger.info('Feature space visualization.')
    qualcity.features.visualize_features(
        features,
        labels,
        label_names,
        build_maniflod(
            visualization_args['manifold']['algorithm'],
            **visualization_args['manifold']['parameters']
        ),
        build_reductor(
            visualization_args['dimension_reduction']['algorithm'],
            **visualization_args['dimension_reduction']['parameters']
        ),
        visualization_args['dimension_reduction']['parameters']['n_components']
        ** kwargs['style']
    )
    logger.info('Visualization process ended.')


def process(features, labels, buildings, label_names, **process_args):
    logger.info('Processing features...')
    if 'visualization' in process_args.keys():
        visualize(
            features,
            labels,
            label_names,
            **process_args['visualization']
        )

    qualcity.learning.classify(
        features,
        labels,
        buildings,
        label_names,
        **process_args['classification']
    )
    logger.info('Succesfully classified features.')
    plt.show()


def load_pipeline_config(pip_conf):
    logger.info('Loading pipeline configuration file...')
    with open(pip_conf, mode='r') as conf:
        return yaml.load(conf)


def label_names(config, labels):
    if config['depth'] < 2:
        return tuple(set(labels))
    elif config['depth'] == 2:
        return (
            tuple(set(labels)) if config['hierarchical']
            else ['Building', 'Facet']
        )
    elif config['depth'] == 3:
        return (
            {
                'Valid': None,
                'Building': qualcity.labels.LABELS(
                    config['LoD'],
                    ['Building']
                ),
                'Facet': qualcity.labels.LABELS(
                    config['LoD'],
                    ['Facet']
                )
            } if config['hierarchical']
            else qualcity.labels.LABELS(
                config['LoD'],
                ['Building', 'Facet']
            )
        )
    else:
        raise LookupError('depth cannot be > 3')


def main():
    arguments = docopt.docopt(
        __doc__,
        help=True,
        version=__version__,
        options_first=False
    )

    config_logger(arguments)

    configuration = load_pipeline_config(arguments['<pipline_conf>'])
    logger.info('Pipeline loaded.')

    buildings, labels = format_labels(
        **configuration['labels']
    )
    logger.debug(
        'There are %s buildings. Buildings are: %s',
        len(buildings),
        buildings
    )
    logger.debug('Labels are: %s', labels)
    logger.info('Labels safely loaded.')

    features = qualcity.features.get_features(
        buildings,
        **configuration['features']
    )
    logger.debug(features)
    logger.info('Features safely loaded.')

    process(
        features,
        labels,
        buildings,
        label_names(
            configuration['labels'],
            labels
        ),
        **configuration['processing']
    )


if __name__ == '__main__':
    main()
